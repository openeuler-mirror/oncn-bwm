// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
//      protoc-gen-go v1.32.0
//      protoc        v4.25.1
// source: daemon_rpc.proto

package daemon_rpc

import (
        protoreflect "google.golang.org/protobuf/reflect/protoreflect"
        protoimpl "google.golang.org/protobuf/runtime/protoimpl"
        reflect "reflect"
        sync "sync"
)

const (
        // Verify that this generated code is sufficiently up-to-date.
        _ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
        // Verify that runtime/protoimpl is sufficiently up-to-date.
        _ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetQosRequest struct {
        state         protoimpl.MessageState
        sizeCache     protoimpl.SizeCache
        unknownFields protoimpl.UnknownFields

        K8SPodName      string `protobuf:"bytes,1,opt,name=K8sPodName,proto3" json:"K8sPodName,omitempty"`
        K8SPodNamespace string `protobuf:"bytes,2,opt,name=K8sPodNamespace,proto3" json:"K8sPodNamespace,omitempty"`
        VethIpv4        string `protobuf:"bytes,3,opt,name=VethIpv4,proto3" json:"VethIpv4,omitempty"`
        VethIpv6        string `protobuf:"bytes,4,opt,name=VethIpv6,proto3" json:"VethIpv6,omitempty"`
        HostMac         string `protobuf:"bytes,5,opt,name=hostMac,proto3" json:"hostMac,omitempty"`
        VethHostIdx     int32  `protobuf:"varint,6,opt,name=vethHostIdx,proto3" json:"vethHostIdx,omitempty"`
        VethLXCMac      string `protobuf:"bytes,7,opt,name=vethLXCMac,proto3" json:"vethLXCMac,omitempty"`
        VethHostName    string `protobuf:"bytes,8,opt,name=vethHostName,proto3" json:"vethHostName,omitempty"`
        VethLXCName     string `protobuf:"bytes,9,opt,name=vethLXCName,proto3" json:"vethLXCName,omitempty"`
        ContainerId     string `protobuf:"bytes,10,opt,name=ContainerId,proto3" json:"ContainerId,omitempty"`
        Netns           string `protobuf:"bytes,11,opt,name=Netns,proto3" json:"Netns,omitempty"`
}

func (x *SetQosRequest) Reset() {
        *x = SetQosRequest{}
        if protoimpl.UnsafeEnabled {
                mi := &file_daemon_rpc_proto_msgTypes[0]
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                ms.StoreMessageInfo(mi)
        }
}

func (x *SetQosRequest) String() string {
        return protoimpl.X.MessageStringOf(x)
}

func (*SetQosRequest) ProtoMessage() {}

func (x *SetQosRequest) ProtoReflect() protoreflect.Message {
        mi := &file_daemon_rpc_proto_msgTypes[0]
        if protoimpl.UnsafeEnabled && x != nil {
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                if ms.LoadMessageInfo() == nil {
                        ms.StoreMessageInfo(mi)
                }
                return ms
        }
        return mi.MessageOf(x)
}

// Deprecated: Use SetQosRequest.ProtoReflect.Descriptor instead.
func (*SetQosRequest) Descriptor() ([]byte, []int) {
        return file_daemon_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *SetQosRequest) GetK8SPodName() string {
        if x != nil {
                return x.K8SPodName
        }
        return ""
}

func (x *SetQosRequest) GetK8SPodNamespace() string {
        if x != nil {
                return x.K8SPodNamespace
        }
        return ""
}

func (x *SetQosRequest) GetVethIpv4() string {
        if x != nil {
                return x.VethIpv4
        }
        return ""
}

func (x *SetQosRequest) GetVethIpv6() string {
        if x != nil {
                return x.VethIpv6
        }
        return ""
}

func (x *SetQosRequest) GetHostMac() string {
        if x != nil {
                return x.HostMac
        }
        return ""
}

func (x *SetQosRequest) GetVethHostIdx() int32 {
        if x != nil {
                return x.VethHostIdx
        }
        return 0
}

func (x *SetQosRequest) GetVethLXCMac() string {
        if x != nil {
                return x.VethLXCMac
        }
        return ""
}

func (x *SetQosRequest) GetVethHostName() string {
        if x != nil {
                return x.VethHostName
        }
        return ""
}

func (x *SetQosRequest) GetVethLXCName() string {
        if x != nil {
                return x.VethLXCName
        }
        return ""
}

func (x *SetQosRequest) GetContainerId() string {
        if x != nil {
                return x.ContainerId
        }
        return ""
}

func (x *SetQosRequest) GetNetns() string {
        if x != nil {
                return x.Netns
        }
        return ""
}

type SetQosReply struct {
        state         protoimpl.MessageState
        sizeCache     protoimpl.SizeCache
        unknownFields protoimpl.UnknownFields

        Success    bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
        FailReason string `protobuf:"bytes,2,opt,name=FailReason,proto3" json:"FailReason,omitempty"`
        LocalId    uint32 `protobuf:"varint,3,opt,name=LocalId,proto3" json:"LocalId,omitempty"`
}

func (x *SetQosReply) Reset() {
        *x = SetQosReply{}
        if protoimpl.UnsafeEnabled {
                mi := &file_daemon_rpc_proto_msgTypes[1]
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                ms.StoreMessageInfo(mi)
        }
}

func (x *SetQosReply) String() string {
        return protoimpl.X.MessageStringOf(x)
}

func (*SetQosReply) ProtoMessage() {}

func (x *SetQosReply) ProtoReflect() protoreflect.Message {
        mi := &file_daemon_rpc_proto_msgTypes[1]
        if protoimpl.UnsafeEnabled && x != nil {
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                if ms.LoadMessageInfo() == nil {
                        ms.StoreMessageInfo(mi)
                }
                return ms
        }
        return mi.MessageOf(x)
}

// Deprecated: Use SetQosReply.ProtoReflect.Descriptor instead.
func (*SetQosReply) Descriptor() ([]byte, []int) {
        return file_daemon_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *SetQosReply) GetSuccess() bool {
        if x != nil {
                return x.Success
        }
        return false
}

func (x *SetQosReply) GetFailReason() string {
        if x != nil {
                return x.FailReason
        }
        return ""
}

func (x *SetQosReply) GetLocalId() uint32 {
        if x != nil {
                return x.LocalId
        }
        return 0
}

type UnSetQosRequest struct {
        state         protoimpl.MessageState
        sizeCache     protoimpl.SizeCache
        unknownFields protoimpl.UnknownFields

        K8SPodName      string `protobuf:"bytes,1,opt,name=K8sPodName,proto3" json:"K8sPodName,omitempty"`
        K8SPodNamespace string `protobuf:"bytes,2,opt,name=K8sPodNamespace,proto3" json:"K8sPodNamespace,omitempty"`
        VethIpv4        string `protobuf:"bytes,3,opt,name=VethIpv4,proto3" json:"VethIpv4,omitempty"`
        VethIpv6        string `protobuf:"bytes,4,opt,name=VethIpv6,proto3" json:"VethIpv6,omitempty"`
        HostMac         string `protobuf:"bytes,5,opt,name=hostMac,proto3" json:"hostMac,omitempty"`
        VethHostIdx     int32  `protobuf:"varint,6,opt,name=vethHostIdx,proto3" json:"vethHostIdx,omitempty"`
        VethLXCMac      string `protobuf:"bytes,7,opt,name=vethLXCMac,proto3" json:"vethLXCMac,omitempty"`
        VethHostName    string `protobuf:"bytes,8,opt,name=vethHostName,proto3" json:"vethHostName,omitempty"`
        VethLXCName     string `protobuf:"bytes,9,opt,name=vethLXCName,proto3" json:"vethLXCName,omitempty"`
        ContainerId     string `protobuf:"bytes,10,opt,name=ContainerId,proto3" json:"ContainerId,omitempty"`
        Netns           string `protobuf:"bytes,11,opt,name=Netns,proto3" json:"Netns,omitempty"`
}

func (x *UnSetQosRequest) Reset() {
        *x = UnSetQosRequest{}
        if protoimpl.UnsafeEnabled {
                mi := &file_daemon_rpc_proto_msgTypes[2]
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                ms.StoreMessageInfo(mi)
        }
}

func (x *UnSetQosRequest) String() string {
        return protoimpl.X.MessageStringOf(x)
}

func (*UnSetQosRequest) ProtoMessage() {}

func (x *UnSetQosRequest) ProtoReflect() protoreflect.Message {
        mi := &file_daemon_rpc_proto_msgTypes[2]
        if protoimpl.UnsafeEnabled && x != nil {
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                if ms.LoadMessageInfo() == nil {
                        ms.StoreMessageInfo(mi)
                }
                return ms
        }
        return mi.MessageOf(x)
}

// Deprecated: Use UnSetQosRequest.ProtoReflect.Descriptor instead.
func (*UnSetQosRequest) Descriptor() ([]byte, []int) {
        return file_daemon_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *UnSetQosRequest) GetK8SPodName() string {
        if x != nil {
                return x.K8SPodName
        }
        return ""
}

func (x *UnSetQosRequest) GetK8SPodNamespace() string {
        if x != nil {
                return x.K8SPodNamespace
        }
        return ""
}

func (x *UnSetQosRequest) GetVethIpv4() string {
        if x != nil {
                return x.VethIpv4
        }
        return ""
}

func (x *UnSetQosRequest) GetVethIpv6() string {
        if x != nil {
                return x.VethIpv6
        }
        return ""
}

func (x *UnSetQosRequest) GetHostMac() string {
        if x != nil {
                return x.HostMac
        }
        return ""
}

func (x *UnSetQosRequest) GetVethHostIdx() int32 {
        if x != nil {
                return x.VethHostIdx
        }
        return 0
}

func (x *UnSetQosRequest) GetVethLXCMac() string {
        if x != nil {
                return x.VethLXCMac
        }
        return ""
}

func (x *UnSetQosRequest) GetVethHostName() string {
        if x != nil {
                return x.VethHostName
        }
        return ""
}

func (x *UnSetQosRequest) GetVethLXCName() string {
        if x != nil {
                return x.VethLXCName
        }
        return ""
}

func (x *UnSetQosRequest) GetContainerId() string {
        if x != nil {
                return x.ContainerId
        }
        return ""
}

func (x *UnSetQosRequest) GetNetns() string {
        if x != nil {
                return x.Netns
        }
        return ""
}

type UnSetQosReply struct {
        state         protoimpl.MessageState
        sizeCache     protoimpl.SizeCache
        unknownFields protoimpl.UnknownFields

        Success    bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
        FailReason string `protobuf:"bytes,2,opt,name=FailReason,proto3" json:"FailReason,omitempty"`
        LocalId    uint32 `protobuf:"varint,3,opt,name=LocalId,proto3" json:"LocalId,omitempty"`
}

func (x *UnSetQosReply) Reset() {
        *x = UnSetQosReply{}
        if protoimpl.UnsafeEnabled {
                mi := &file_daemon_rpc_proto_msgTypes[3]
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                ms.StoreMessageInfo(mi)
        }
}

func (x *UnSetQosReply) String() string {
        return protoimpl.X.MessageStringOf(x)
}

func (*UnSetQosReply) ProtoMessage() {}

func (x *UnSetQosReply) ProtoReflect() protoreflect.Message {
        mi := &file_daemon_rpc_proto_msgTypes[3]
        if protoimpl.UnsafeEnabled && x != nil {
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                if ms.LoadMessageInfo() == nil {
                        ms.StoreMessageInfo(mi)
                }
                return ms
        }
        return mi.MessageOf(x)
}

// Deprecated: Use UnSetQosReply.ProtoReflect.Descriptor instead.
func (*UnSetQosReply) Descriptor() ([]byte, []int) {
        return file_daemon_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *UnSetQosReply) GetSuccess() bool {
        if x != nil {
                return x.Success
        }
        return false
}

func (x *UnSetQosReply) GetFailReason() string {
        if x != nil {
                return x.FailReason
        }
        return ""
}

func (x *UnSetQosReply) GetLocalId() uint32 {
        if x != nil {
                return x.LocalId
        }
        return 0
}

type SetFlowRequest struct {
        state         protoimpl.MessageState
        sizeCache     protoimpl.SizeCache
        unknownFields protoimpl.UnknownFields

        Direct                string `protobuf:"bytes,1,opt,name=Direct,proto3" json:"Direct,omitempty"`
        Ip                    string `protobuf:"bytes,2,opt,name=Ip,proto3" json:"Ip,omitempty"`
        Port                  uint32 `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
        SendBandWidthRequestM uint64 `protobuf:"varint,4,opt,name=SendBandWidthRequestM,proto3" json:"SendBandWidthRequestM,omitempty"`
        SendBandWidthLimitM   uint64 `protobuf:"varint,5,opt,name=SendBandWidthLimitM,proto3" json:"SendBandWidthLimitM,omitempty"`
        SendPriority          uint32 `protobuf:"varint,6,opt,name=SendPriority,proto3" json:"SendPriority,omitempty"`
        RecvBandWidthRequestM uint64 `protobuf:"varint,7,opt,name=RecvBandWidthRequestM,proto3" json:"RecvBandWidthRequestM,omitempty"`
        RecvBandWidthLimitM   uint64 `protobuf:"varint,8,opt,name=RecvBandWidthLimitM,proto3" json:"RecvBandWidthLimitM,omitempty"`
        RecvPriority          uint32 `protobuf:"varint,9,opt,name=RecvPriority,proto3" json:"RecvPriority,omitempty"`
}

func (x *SetFlowRequest) Reset() {
        *x = SetFlowRequest{}
        if protoimpl.UnsafeEnabled {
                mi := &file_daemon_rpc_proto_msgTypes[4]
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                ms.StoreMessageInfo(mi)
        }
}

func (x *SetFlowRequest) String() string {
        return protoimpl.X.MessageStringOf(x)
}

func (*SetFlowRequest) ProtoMessage() {}

func (x *SetFlowRequest) ProtoReflect() protoreflect.Message {
        mi := &file_daemon_rpc_proto_msgTypes[4]
        if protoimpl.UnsafeEnabled && x != nil {
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                if ms.LoadMessageInfo() == nil {
                        ms.StoreMessageInfo(mi)
                }
                return ms
        }
        return mi.MessageOf(x)
}

// Deprecated: Use SetFlowRequest.ProtoReflect.Descriptor instead.
func (*SetFlowRequest) Descriptor() ([]byte, []int) {
        return file_daemon_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *SetFlowRequest) GetDirect() string {
        if x != nil {
                return x.Direct
        }
        return ""
}

func (x *SetFlowRequest) GetIp() string {
        if x != nil {
                return x.Ip
        }
        return ""
}

func (x *SetFlowRequest) GetPort() uint32 {
        if x != nil {
                return x.Port
        }
        return 0
}

func (x *SetFlowRequest) GetSendBandWidthRequestM() uint64 {
        if x != nil {
                return x.SendBandWidthRequestM
        }
        return 0
}

func (x *SetFlowRequest) GetSendBandWidthLimitM() uint64 {
        if x != nil {
                return x.SendBandWidthLimitM
        }
        return 0
}

func (x *SetFlowRequest) GetSendPriority() uint32 {
        if x != nil {
                return x.SendPriority
        }
        return 0
}

func (x *SetFlowRequest) GetRecvBandWidthRequestM() uint64 {
        if x != nil {
                return x.RecvBandWidthRequestM
        }
        return 0
}

func (x *SetFlowRequest) GetRecvBandWidthLimitM() uint64 {
        if x != nil {
                return x.RecvBandWidthLimitM
        }
        return 0
}

func (x *SetFlowRequest) GetRecvPriority() uint32 {
        if x != nil {
                return x.RecvPriority
        }
        return 0
}

type SetFlowReply struct {
        state         protoimpl.MessageState
        sizeCache     protoimpl.SizeCache
        unknownFields protoimpl.UnknownFields

        Success    bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
        FailReason string `protobuf:"bytes,2,opt,name=FailReason,proto3" json:"FailReason,omitempty"`
        LocalId    uint32 `protobuf:"varint,3,opt,name=LocalId,proto3" json:"LocalId,omitempty"`
}

func (x *SetFlowReply) Reset() {
        *x = SetFlowReply{}
        if protoimpl.UnsafeEnabled {
                mi := &file_daemon_rpc_proto_msgTypes[5]
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                ms.StoreMessageInfo(mi)
        }
}

func (x *SetFlowReply) String() string {
        return protoimpl.X.MessageStringOf(x)
}

func (*SetFlowReply) ProtoMessage() {}

func (x *SetFlowReply) ProtoReflect() protoreflect.Message {
        mi := &file_daemon_rpc_proto_msgTypes[5]
        if protoimpl.UnsafeEnabled && x != nil {
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                if ms.LoadMessageInfo() == nil {
                        ms.StoreMessageInfo(mi)
                }
                return ms
        }
        return mi.MessageOf(x)
}

// Deprecated: Use SetFlowReply.ProtoReflect.Descriptor instead.
func (*SetFlowReply) Descriptor() ([]byte, []int) {
        return file_daemon_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *SetFlowReply) GetSuccess() bool {
        if x != nil {
                return x.Success
        }
        return false
}

func (x *SetFlowReply) GetFailReason() string {
        if x != nil {
                return x.FailReason
        }
        return ""
}

func (x *SetFlowReply) GetLocalId() uint32 {
        if x != nil {
                return x.LocalId
        }
        return 0
}

type UnSetFlowRequest struct {
        state         protoimpl.MessageState
        sizeCache     protoimpl.SizeCache
        unknownFields protoimpl.UnknownFields

        Direct                string `protobuf:"bytes,1,opt,name=Direct,proto3" json:"Direct,omitempty"`
        Ip                    string `protobuf:"bytes,2,opt,name=Ip,proto3" json:"Ip,omitempty"`
        Port                  uint32 `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
        SendBandWidthRequestM uint64 `protobuf:"varint,4,opt,name=SendBandWidthRequestM,proto3" json:"SendBandWidthRequestM,omitempty"`
        SendBandWidthLimitM   uint64 `protobuf:"varint,5,opt,name=SendBandWidthLimitM,proto3" json:"SendBandWidthLimitM,omitempty"`
        SendPriority          uint32 `protobuf:"varint,6,opt,name=SendPriority,proto3" json:"SendPriority,omitempty"`
        RecvBandWidthRequestM uint64 `protobuf:"varint,7,opt,name=RecvBandWidthRequestM,proto3" json:"RecvBandWidthRequestM,omitempty"`
        RecvBandWidthLimitM   uint64 `protobuf:"varint,8,opt,name=RecvBandWidthLimitM,proto3" json:"RecvBandWidthLimitM,omitempty"`
        RecvPriority          uint32 `protobuf:"varint,9,opt,name=RecvPriority,proto3" json:"RecvPriority,omitempty"`
}

func (x *UnSetFlowRequest) Reset() {
        *x = UnSetFlowRequest{}
        if protoimpl.UnsafeEnabled {
                mi := &file_daemon_rpc_proto_msgTypes[6]
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                ms.StoreMessageInfo(mi)
        }
}

func (x *UnSetFlowRequest) String() string {
        return protoimpl.X.MessageStringOf(x)
}

func (*UnSetFlowRequest) ProtoMessage() {}

func (x *UnSetFlowRequest) ProtoReflect() protoreflect.Message {
        mi := &file_daemon_rpc_proto_msgTypes[6]
        if protoimpl.UnsafeEnabled && x != nil {
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                if ms.LoadMessageInfo() == nil {
                        ms.StoreMessageInfo(mi)
                }
                return ms
        }
        return mi.MessageOf(x)
}

// Deprecated: Use UnSetFlowRequest.ProtoReflect.Descriptor instead.
func (*UnSetFlowRequest) Descriptor() ([]byte, []int) {
        return file_daemon_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *UnSetFlowRequest) GetDirect() string {
        if x != nil {
                return x.Direct
        }
        return ""
}

func (x *UnSetFlowRequest) GetIp() string {
        if x != nil {
                return x.Ip
        }
        return ""
}

func (x *UnSetFlowRequest) GetPort() uint32 {
        if x != nil {
                return x.Port
        }
        return 0
}

func (x *UnSetFlowRequest) GetSendBandWidthRequestM() uint64 {
        if x != nil {
                return x.SendBandWidthRequestM
        }
        return 0
}

func (x *UnSetFlowRequest) GetSendBandWidthLimitM() uint64 {
        if x != nil {
                return x.SendBandWidthLimitM
        }
        return 0
}

func (x *UnSetFlowRequest) GetSendPriority() uint32 {
        if x != nil {
                return x.SendPriority
        }
        return 0
}

func (x *UnSetFlowRequest) GetRecvBandWidthRequestM() uint64 {
        if x != nil {
                return x.RecvBandWidthRequestM
        }
        return 0
}

func (x *UnSetFlowRequest) GetRecvBandWidthLimitM() uint64 {
        if x != nil {
                return x.RecvBandWidthLimitM
        }
        return 0
}

func (x *UnSetFlowRequest) GetRecvPriority() uint32 {
        if x != nil {
                return x.RecvPriority
        }
        return 0
}

type UnSetFlowReply struct {
        state         protoimpl.MessageState
        sizeCache     protoimpl.SizeCache
        unknownFields protoimpl.UnknownFields

        Success    bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
        FailReason string `protobuf:"bytes,2,opt,name=FailReason,proto3" json:"FailReason,omitempty"`
        LocalId    uint32 `protobuf:"varint,3,opt,name=LocalId,proto3" json:"LocalId,omitempty"`
}

func (x *UnSetFlowReply) Reset() {
        *x = UnSetFlowReply{}
        if protoimpl.UnsafeEnabled {
                mi := &file_daemon_rpc_proto_msgTypes[7]
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                ms.StoreMessageInfo(mi)
        }
}

func (x *UnSetFlowReply) String() string {
        return protoimpl.X.MessageStringOf(x)
}

func (*UnSetFlowReply) ProtoMessage() {}

func (x *UnSetFlowReply) ProtoReflect() protoreflect.Message {
        mi := &file_daemon_rpc_proto_msgTypes[7]
        if protoimpl.UnsafeEnabled && x != nil {
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                if ms.LoadMessageInfo() == nil {
                        ms.StoreMessageInfo(mi)
                }
                return ms
        }
        return mi.MessageOf(x)
}

// Deprecated: Use UnSetFlowReply.ProtoReflect.Descriptor instead.
func (*UnSetFlowReply) Descriptor() ([]byte, []int) {
        return file_daemon_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *UnSetFlowReply) GetSuccess() bool {
        if x != nil {
                return x.Success
        }
        return false
}

func (x *UnSetFlowReply) GetFailReason() string {
        if x != nil {
                return x.FailReason
        }
        return ""
}

func (x *UnSetFlowReply) GetLocalId() uint32 {
        if x != nil {
                return x.LocalId
        }
        return 0
}

type EmptyRequest struct {
        state         protoimpl.MessageState
        sizeCache     protoimpl.SizeCache
        unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
        *x = EmptyRequest{}
        if protoimpl.UnsafeEnabled {
                mi := &file_daemon_rpc_proto_msgTypes[8]
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                ms.StoreMessageInfo(mi)
        }
}

func (x *EmptyRequest) String() string {
        return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
        mi := &file_daemon_rpc_proto_msgTypes[8]
        if protoimpl.UnsafeEnabled && x != nil {
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                if ms.LoadMessageInfo() == nil {
                        ms.StoreMessageInfo(mi)
                }
                return ms
        }
        return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
        return file_daemon_rpc_proto_rawDescGZIP(), []int{8}
}

type QosFlow struct {
        state         protoimpl.MessageState
        sizeCache     protoimpl.SizeCache
        unknownFields protoimpl.UnknownFields

        Direct                string `protobuf:"bytes,1,opt,name=Direct,proto3" json:"Direct,omitempty"`
        Ip                    string `protobuf:"bytes,2,opt,name=Ip,proto3" json:"Ip,omitempty"`
        Port                  uint32 `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
        LocalId               uint32 `protobuf:"varint,4,opt,name=LocalId,proto3" json:"LocalId,omitempty"`
        SendBandWidthRequestM uint64 `protobuf:"varint,5,opt,name=SendBandWidthRequestM,proto3" json:"SendBandWidthRequestM,omitempty"`
        SendBandWidthLimitM   uint64 `protobuf:"varint,6,opt,name=SendBandWidthLimitM,proto3" json:"SendBandWidthLimitM,omitempty"`
        SendPriority          uint32 `protobuf:"varint,7,opt,name=SendPriority,proto3" json:"SendPriority,omitempty"`
        RecvBandWidthRequestM uint64 `protobuf:"varint,8,opt,name=RecvBandWidthRequestM,proto3" json:"RecvBandWidthRequestM,omitempty"`
        RecvBandWidthLimitM   uint64 `protobuf:"varint,9,opt,name=RecvBandWidthLimitM,proto3" json:"RecvBandWidthLimitM,omitempty"`
        RecvPriority          uint32 `protobuf:"varint,10,opt,name=RecvPriority,proto3" json:"RecvPriority,omitempty"`
}

func (x *QosFlow) Reset() {
        *x = QosFlow{}
        if protoimpl.UnsafeEnabled {
                mi := &file_daemon_rpc_proto_msgTypes[9]
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                ms.StoreMessageInfo(mi)
        }
}

func (x *QosFlow) String() string {
        return protoimpl.X.MessageStringOf(x)
}

func (*QosFlow) ProtoMessage() {}

func (x *QosFlow) ProtoReflect() protoreflect.Message {
        mi := &file_daemon_rpc_proto_msgTypes[9]
        if protoimpl.UnsafeEnabled && x != nil {
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                if ms.LoadMessageInfo() == nil {
                        ms.StoreMessageInfo(mi)
                }
                return ms
        }
        return mi.MessageOf(x)
}

// Deprecated: Use QosFlow.ProtoReflect.Descriptor instead.
func (*QosFlow) Descriptor() ([]byte, []int) {
        return file_daemon_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *QosFlow) GetDirect() string {
        if x != nil {
                return x.Direct
        }
        return ""
}

func (x *QosFlow) GetIp() string {
        if x != nil {
                return x.Ip
        }
        return ""
}

func (x *QosFlow) GetPort() uint32 {
        if x != nil {
                return x.Port
        }
        return 0
}

func (x *QosFlow) GetLocalId() uint32 {
        if x != nil {
                return x.LocalId
        }
        return 0
}

func (x *QosFlow) GetSendBandWidthRequestM() uint64 {
        if x != nil {
                return x.SendBandWidthRequestM
        }
        return 0
}

func (x *QosFlow) GetSendBandWidthLimitM() uint64 {
        if x != nil {
                return x.SendBandWidthLimitM
        }
        return 0
}

func (x *QosFlow) GetSendPriority() uint32 {
        if x != nil {
                return x.SendPriority
        }
        return 0
}

func (x *QosFlow) GetRecvBandWidthRequestM() uint64 {
        if x != nil {
                return x.RecvBandWidthRequestM
        }
        return 0
}

func (x *QosFlow) GetRecvBandWidthLimitM() uint64 {
        if x != nil {
                return x.RecvBandWidthLimitM
        }
        return 0
}

func (x *QosFlow) GetRecvPriority() uint32 {
        if x != nil {
                return x.RecvPriority
        }
        return 0
}

type QosFlows struct {
        state         protoimpl.MessageState
        sizeCache     protoimpl.SizeCache
        unknownFields protoimpl.UnknownFields

        QosFlows []*QosFlow `protobuf:"bytes,1,rep,name=qosFlows,proto3" json:"qosFlows,omitempty"`
}

func (x *QosFlows) Reset() {
        *x = QosFlows{}
        if protoimpl.UnsafeEnabled {
                mi := &file_daemon_rpc_proto_msgTypes[10]
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                ms.StoreMessageInfo(mi)
        }
}

func (x *QosFlows) String() string {
        return protoimpl.X.MessageStringOf(x)
}

func (*QosFlows) ProtoMessage() {}

func (x *QosFlows) ProtoReflect() protoreflect.Message {
        mi := &file_daemon_rpc_proto_msgTypes[10]
        if protoimpl.UnsafeEnabled && x != nil {
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                if ms.LoadMessageInfo() == nil {
                        ms.StoreMessageInfo(mi)
                }
                return ms
        }
        return mi.MessageOf(x)
}

// Deprecated: Use QosFlows.ProtoReflect.Descriptor instead.
func (*QosFlows) Descriptor() ([]byte, []int) {
        return file_daemon_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *QosFlows) GetQosFlows() []*QosFlow {
        if x != nil {
                return x.QosFlows
        }
        return nil
}

type PodInfo struct {
        state         protoimpl.MessageState
        sizeCache     protoimpl.SizeCache
        unknownFields protoimpl.UnknownFields

        K8SPodName            string `protobuf:"bytes,1,opt,name=K8sPodName,proto3" json:"K8sPodName,omitempty"`
        K8SPodNamespace       string `protobuf:"bytes,2,opt,name=K8sPodNamespace,proto3" json:"K8sPodNamespace,omitempty"`
        ContainerId           string `protobuf:"bytes,3,opt,name=ContainerId,proto3" json:"ContainerId,omitempty"`
        LocalId               uint32 `protobuf:"varint,4,opt,name=LocalId,proto3" json:"LocalId,omitempty"`
        SendBandWidthRequestM uint64 `protobuf:"varint,5,opt,name=SendBandWidthRequestM,proto3" json:"SendBandWidthRequestM,omitempty"`
        SendBandWidthLimitM   uint64 `protobuf:"varint,6,opt,name=SendBandWidthLimitM,proto3" json:"SendBandWidthLimitM,omitempty"`
        SendPriority          uint32 `protobuf:"varint,7,opt,name=SendPriority,proto3" json:"SendPriority,omitempty"`
        RecvBandWidthRequestM uint64 `protobuf:"varint,8,opt,name=RecvBandWidthRequestM,proto3" json:"RecvBandWidthRequestM,omitempty"`
        RecvBandWidthLimitM   uint64 `protobuf:"varint,9,opt,name=RecvBandWidthLimitM,proto3" json:"RecvBandWidthLimitM,omitempty"`
        RecvPriority          uint32 `protobuf:"varint,10,opt,name=RecvPriority,proto3" json:"RecvPriority,omitempty"`
}

func (x *PodInfo) Reset() {
        *x = PodInfo{}
        if protoimpl.UnsafeEnabled {
                mi := &file_daemon_rpc_proto_msgTypes[11]
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                ms.StoreMessageInfo(mi)
        }
}

func (x *PodInfo) String() string {
        return protoimpl.X.MessageStringOf(x)
}

func (*PodInfo) ProtoMessage() {}

func (x *PodInfo) ProtoReflect() protoreflect.Message {
        mi := &file_daemon_rpc_proto_msgTypes[11]
        if protoimpl.UnsafeEnabled && x != nil {
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                if ms.LoadMessageInfo() == nil {
                        ms.StoreMessageInfo(mi)
                }
                return ms
        }
        return mi.MessageOf(x)
}

// Deprecated: Use PodInfo.ProtoReflect.Descriptor instead.
func (*PodInfo) Descriptor() ([]byte, []int) {
        return file_daemon_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *PodInfo) GetK8SPodName() string {
        if x != nil {
                return x.K8SPodName
        }
        return ""
}

func (x *PodInfo) GetK8SPodNamespace() string {
        if x != nil {
                return x.K8SPodNamespace
        }
        return ""
}

func (x *PodInfo) GetContainerId() string {
        if x != nil {
                return x.ContainerId
        }
        return ""
}

func (x *PodInfo) GetLocalId() uint32 {
        if x != nil {
                return x.LocalId
        }
        return 0
}

func (x *PodInfo) GetSendBandWidthRequestM() uint64 {
        if x != nil {
                return x.SendBandWidthRequestM
        }
        return 0
}

func (x *PodInfo) GetSendBandWidthLimitM() uint64 {
        if x != nil {
                return x.SendBandWidthLimitM
        }
        return 0
}

func (x *PodInfo) GetSendPriority() uint32 {
        if x != nil {
                return x.SendPriority
        }
        return 0
}

func (x *PodInfo) GetRecvBandWidthRequestM() uint64 {
        if x != nil {
                return x.RecvBandWidthRequestM
        }
        return 0
}

func (x *PodInfo) GetRecvBandWidthLimitM() uint64 {
        if x != nil {
                return x.RecvBandWidthLimitM
        }
        return 0
}

func (x *PodInfo) GetRecvPriority() uint32 {
        if x != nil {
                return x.RecvPriority
        }
        return 0
}

type PodInfos struct {
        state         protoimpl.MessageState
        sizeCache     protoimpl.SizeCache
        unknownFields protoimpl.UnknownFields

        PodInfos []*PodInfo `protobuf:"bytes,1,rep,name=podInfos,proto3" json:"podInfos,omitempty"`
}

func (x *PodInfos) Reset() {
        *x = PodInfos{}
        if protoimpl.UnsafeEnabled {
                mi := &file_daemon_rpc_proto_msgTypes[12]
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                ms.StoreMessageInfo(mi)
        }
}

func (x *PodInfos) String() string {
        return protoimpl.X.MessageStringOf(x)
}

func (*PodInfos) ProtoMessage() {}

func (x *PodInfos) ProtoReflect() protoreflect.Message {
        mi := &file_daemon_rpc_proto_msgTypes[12]
        if protoimpl.UnsafeEnabled && x != nil {
                ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
                if ms.LoadMessageInfo() == nil {
                        ms.StoreMessageInfo(mi)
                }
                return ms
        }
        return mi.MessageOf(x)
}

// Deprecated: Use PodInfos.ProtoReflect.Descriptor instead.
func (*PodInfos) Descriptor() ([]byte, []int) {
        return file_daemon_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *PodInfos) GetPodInfos() []*PodInfo {
        if x != nil {
                return x.PodInfos
        }
        return nil
}

var File_daemon_rpc_proto protoreflect.FileDescriptor

var file_daemon_rpc_proto_rawDesc = []byte{
        0x0a, 0x10, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f,
        0x74, 0x6f, 0x12, 0x03, 0x72, 0x70, 0x63, 0x22, 0xeb, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x51,
        0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x38, 0x73,
        0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b,
        0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4b, 0x38, 0x73,
        0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
        0x28, 0x09, 0x52, 0x0f, 0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
        0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x65, 0x74, 0x68, 0x49, 0x70, 0x76, 0x34, 0x18,
        0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x65, 0x74, 0x68, 0x49, 0x70, 0x76, 0x34, 0x12,
        0x1a, 0x0a, 0x08, 0x56, 0x65, 0x74, 0x68, 0x49, 0x70, 0x76, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28,
        0x09, 0x52, 0x08, 0x56, 0x65, 0x74, 0x68, 0x49, 0x70, 0x76, 0x36, 0x12, 0x18, 0x0a, 0x07, 0x68,
        0x6f, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f,
        0x73, 0x74, 0x4d, 0x61, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x74, 0x68, 0x48, 0x6f, 0x73,
        0x74, 0x49, 0x64, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x65, 0x74, 0x68,
        0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x74, 0x68, 0x4c,
        0x58, 0x43, 0x4d, 0x61, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x74,
        0x68, 0x4c, 0x58, 0x43, 0x4d, 0x61, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65, 0x74, 0x68, 0x48,
        0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76,
        0x65, 0x74, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76,
        0x65, 0x74, 0x68, 0x4c, 0x58, 0x43, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
        0x52, 0x0b, 0x76, 0x65, 0x74, 0x68, 0x4c, 0x58, 0x43, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
        0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
        0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
        0x14, 0x0a, 0x05, 0x4e, 0x65, 0x74, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
        0x4e, 0x65, 0x74, 0x6e, 0x73, 0x22, 0x61, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x51, 0x6f, 0x73, 0x52,
        0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
        0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e,
        0x0a, 0x0a, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
        0x28, 0x09, 0x52, 0x0a, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18,
        0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
        0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x22, 0xed, 0x02, 0x0a, 0x0f, 0x55, 0x6e, 0x53,
        0x65, 0x74, 0x51, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
        0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
        0x52, 0x0a, 0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
        0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
        0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
        0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x65, 0x74, 0x68, 0x49, 0x70,
        0x76, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x65, 0x74, 0x68, 0x49, 0x70,
        0x76, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x65, 0x74, 0x68, 0x49, 0x70, 0x76, 0x36, 0x18, 0x04,
        0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x65, 0x74, 0x68, 0x49, 0x70, 0x76, 0x36, 0x12, 0x18,
        0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
        0x07, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x74, 0x68,
        0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76,
        0x65, 0x74, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65,
        0x74, 0x68, 0x4c, 0x58, 0x43, 0x4d, 0x61, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
        0x76, 0x65, 0x74, 0x68, 0x4c, 0x58, 0x43, 0x4d, 0x61, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65,
        0x74, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
        0x52, 0x0c, 0x76, 0x65, 0x74, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
        0x0a, 0x0b, 0x76, 0x65, 0x74, 0x68, 0x4c, 0x58, 0x43, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
        0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x74, 0x68, 0x4c, 0x58, 0x43, 0x4e, 0x61, 0x6d, 0x65,
        0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18,
        0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
        0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x65, 0x74, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
        0x09, 0x52, 0x05, 0x4e, 0x65, 0x74, 0x6e, 0x73, 0x22, 0x63, 0x0a, 0x0d, 0x55, 0x6e, 0x53, 0x65,
        0x74, 0x51, 0x6f, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63,
        0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63,
        0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f,
        0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61,
        0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x03,
        0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x22, 0xe4, 0x02,
        0x0a, 0x0e, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
        0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
        0x52, 0x06, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x02,
        0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74,
        0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x15,
        0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x71,
        0x75, 0x65, 0x73, 0x74, 0x4d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x53, 0x65, 0x6e,
        0x64, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
        0x74, 0x4d, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69,
        0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
        0x13, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69,
        0x6d, 0x69, 0x74, 0x4d, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x6f,
        0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64,
        0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x76,
        0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
        0x4d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x52, 0x65, 0x63, 0x76, 0x42, 0x61, 0x6e,
        0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x12, 0x30,
        0x0a, 0x13, 0x52, 0x65, 0x63, 0x76, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x4c,
        0x69, 0x6d, 0x69, 0x74, 0x4d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x52, 0x65, 0x63,
        0x76, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d,
        0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x76, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
        0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x76, 0x50, 0x72, 0x69, 0x6f,
        0x72, 0x69, 0x74, 0x79, 0x22, 0x62, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52,
        0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
        0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e,
        0x0a, 0x0a, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
        0x28, 0x09, 0x52, 0x0a, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18,
        0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
        0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x22, 0xe6, 0x02, 0x0a, 0x10, 0x55, 0x6e, 0x53,
        0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
        0x06, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44,
        0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
        0x09, 0x52, 0x02, 0x49, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
        0x01, 0x28, 0x0d, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x65, 0x6e,
        0x64, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
        0x74, 0x4d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61,
        0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x12,
        0x30, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68,
        0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x53, 0x65,
        0x6e, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74,
        0x4d, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
        0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69,
        0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x76, 0x42, 0x61, 0x6e,
        0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x18, 0x07,
        0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x52, 0x65, 0x63, 0x76, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69,
        0x64, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x12, 0x30, 0x0a, 0x13, 0x52,
        0x65, 0x63, 0x76, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69,
        0x74, 0x4d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x52, 0x65, 0x63, 0x76, 0x42, 0x61,
        0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x12, 0x22, 0x0a,
        0x0c, 0x52, 0x65, 0x63, 0x76, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20,
        0x01, 0x28, 0x0d, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x76, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
        0x79, 0x22, 0x64, 0x0a, 0x0e, 0x55, 0x6e, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
        0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
        0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a,
        0x0a, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
        0x09, 0x52, 0x0a, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
        0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
        0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79,
        0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf7, 0x02, 0x0a, 0x07, 0x51, 0x6f, 0x73, 0x46,
        0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
        0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
        0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x50,
        0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12,
        0x18, 0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
        0x52, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x65, 0x6e,
        0x64, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
        0x74, 0x4d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61,
        0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x12,
        0x30, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68,
        0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x53, 0x65,
        0x6e, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74,
        0x4d, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
        0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69,
        0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x76, 0x42, 0x61, 0x6e,
        0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x18, 0x08,
        0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x52, 0x65, 0x63, 0x76, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69,
        0x64, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x12, 0x30, 0x0a, 0x13, 0x52,
        0x65, 0x63, 0x76, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69,
        0x74, 0x4d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x52, 0x65, 0x63, 0x76, 0x42, 0x61,
        0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x12, 0x22, 0x0a,
        0x0c, 0x52, 0x65, 0x63, 0x76, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20,
        0x01, 0x28, 0x0d, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x76, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
        0x79, 0x22, 0x34, 0x0a, 0x08, 0x51, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x28, 0x0a,
        0x08, 0x71, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
        0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x08, 0x71,
        0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0xa7, 0x03, 0x0a, 0x07, 0x50, 0x6f, 0x64, 0x49,
        0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
        0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e,
        0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
        0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4b, 0x38,
        0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a,
        0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
        0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
        0x18, 0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
        0x52, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x65, 0x6e,
        0x64, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
        0x74, 0x4d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61,
        0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x12,
        0x30, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68,
        0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x53, 0x65,
        0x6e, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74,
        0x4d, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
        0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69,
        0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x76, 0x42, 0x61, 0x6e,
        0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x18, 0x08,
        0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x52, 0x65, 0x63, 0x76, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69,
        0x64, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x12, 0x30, 0x0a, 0x13, 0x52,
        0x65, 0x63, 0x76, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69,
        0x74, 0x4d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x52, 0x65, 0x63, 0x76, 0x42, 0x61,
        0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x12, 0x22, 0x0a,
        0x0c, 0x52, 0x65, 0x63, 0x76, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20,
        0x01, 0x28, 0x0d, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x76, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
        0x79, 0x22, 0x34, 0x0a, 0x08, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x28, 0x0a,
        0x08, 0x70, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
        0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70,
        0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x32, 0xbe, 0x02, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x51,
        0x6f, 0x73, 0x52, 0x70, 0x63, 0x12, 0x30, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x51, 0x6f, 0x73, 0x12,
        0x12, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x51, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75,
        0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x51, 0x6f, 0x73,
        0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x08, 0x55, 0x6e, 0x53, 0x65, 0x74,
        0x51, 0x6f, 0x73, 0x12, 0x14, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x53, 0x65, 0x74, 0x51,
        0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x2e,
        0x55, 0x6e, 0x53, 0x65, 0x74, 0x51, 0x6f, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
        0x2c, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63,
        0x2e, 0x51, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x1a, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
        0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a,
        0x09, 0x55, 0x6e, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63,
        0x2e, 0x51, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x1a, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55,
        0x6e, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
        0x31, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x11,
        0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
        0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x6f, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73,
        0x22, 0x00, 0x12, 0x34, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x6f, 0x73, 0x50, 0x6f, 0x64,
        0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
        0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f,
        0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x00, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x3b, 0x64,
        0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
        0x33,
}

var (
        file_daemon_rpc_proto_rawDescOnce sync.Once
        file_daemon_rpc_proto_rawDescData = file_daemon_rpc_proto_rawDesc
)

func file_daemon_rpc_proto_rawDescGZIP() []byte {
        file_daemon_rpc_proto_rawDescOnce.Do(func() {
                file_daemon_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_daemon_rpc_proto_rawDescData)
        })
        return file_daemon_rpc_proto_rawDescData
}

var file_daemon_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_daemon_rpc_proto_goTypes = []interface{}{
        (*SetQosRequest)(nil),    // 0: rpc.SetQosRequest
        (*SetQosReply)(nil),      // 1: rpc.SetQosReply
        (*UnSetQosRequest)(nil),  // 2: rpc.UnSetQosRequest
        (*UnSetQosReply)(nil),    // 3: rpc.UnSetQosReply
        (*SetFlowRequest)(nil),   // 4: rpc.SetFlowRequest
        (*SetFlowReply)(nil),     // 5: rpc.SetFlowReply
        (*UnSetFlowRequest)(nil), // 6: rpc.UnSetFlowRequest
        (*UnSetFlowReply)(nil),   // 7: rpc.UnSetFlowReply
        (*EmptyRequest)(nil),     // 8: rpc.EmptyRequest
        (*QosFlow)(nil),          // 9: rpc.QosFlow
        (*QosFlows)(nil),         // 10: rpc.QosFlows
        (*PodInfo)(nil),          // 11: rpc.PodInfo
        (*PodInfos)(nil),         // 12: rpc.PodInfos
}
var file_daemon_rpc_proto_depIdxs = []int32{
        9,  // 0: rpc.QosFlows.qosFlows:type_name -> rpc.QosFlow
        11, // 1: rpc.PodInfos.podInfos:type_name -> rpc.PodInfo
        0,  // 2: rpc.NetQosRpc.SetQos:input_type -> rpc.SetQosRequest
        2,  // 3: rpc.NetQosRpc.UnSetQos:input_type -> rpc.UnSetQosRequest
        9,  // 4: rpc.NetQosRpc.SetFlow:input_type -> rpc.QosFlow
        9,  // 5: rpc.NetQosRpc.UnSetFlow:input_type -> rpc.QosFlow
        8,  // 6: rpc.NetQosRpc.ListQosFlow:input_type -> rpc.EmptyRequest
        8,  // 7: rpc.NetQosRpc.ListQosPodInfo:input_type -> rpc.EmptyRequest
        1,  // 8: rpc.NetQosRpc.SetQos:output_type -> rpc.SetQosReply
        3,  // 9: rpc.NetQosRpc.UnSetQos:output_type -> rpc.UnSetQosReply
        5,  // 10: rpc.NetQosRpc.SetFlow:output_type -> rpc.SetFlowReply
        7,  // 11: rpc.NetQosRpc.UnSetFlow:output_type -> rpc.UnSetFlowReply
        10, // 12: rpc.NetQosRpc.ListQosFlow:output_type -> rpc.QosFlows
        12, // 13: rpc.NetQosRpc.ListQosPodInfo:output_type -> rpc.PodInfos
        8,  // [8:14] is the sub-list for method output_type
        2,  // [2:8] is the sub-list for method input_type
        2,  // [2:2] is the sub-list for extension type_name
        2,  // [2:2] is the sub-list for extension extendee
        0,  // [0:2] is the sub-list for field type_name
}

func init() { file_daemon_rpc_proto_init() }
func file_daemon_rpc_proto_init() {
        if File_daemon_rpc_proto != nil {
                return
        }
        if !protoimpl.UnsafeEnabled {
                file_daemon_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
                        switch v := v.(*SetQosRequest); i {
                        case 0:
                                return &v.state
                        case 1:
                                return &v.sizeCache
                        case 2:
                                return &v.unknownFields
                        default:
                                return nil
                        }
                }
                file_daemon_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
                        switch v := v.(*SetQosReply); i {
                        case 0:
                                return &v.state
                        case 1:
                                return &v.sizeCache
                        case 2:
                                return &v.unknownFields
                        default:
                                return nil
                        }
                }
                file_daemon_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
                        switch v := v.(*UnSetQosRequest); i {
                        case 0:
                                return &v.state
                        case 1:
                                return &v.sizeCache
                        case 2:
                                return &v.unknownFields
                        default:
                                return nil
                        }
                }
                file_daemon_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
                        switch v := v.(*UnSetQosReply); i {
                        case 0:
                                return &v.state
                        case 1:
                                return &v.sizeCache
                        case 2:
                                return &v.unknownFields
                        default:
                                return nil
                        }
                }
                file_daemon_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
                        switch v := v.(*SetFlowRequest); i {
                        case 0:
                                return &v.state
                        case 1:
                                return &v.sizeCache
                        case 2:
                                return &v.unknownFields
                        default:
                                return nil
                        }
                }
                file_daemon_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
                        switch v := v.(*SetFlowReply); i {
                        case 0:
                                return &v.state
                        case 1:
                                return &v.sizeCache
                        case 2:
                                return &v.unknownFields
                        default:
                                return nil
                        }
                }
                file_daemon_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
                        switch v := v.(*UnSetFlowRequest); i {
                        case 0:
                                return &v.state
                        case 1:
                                return &v.sizeCache
                        case 2:
                                return &v.unknownFields
                        default:
                                return nil
                        }
                }
                file_daemon_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
                        switch v := v.(*UnSetFlowReply); i {
                        case 0:
                                return &v.state
                        case 1:
                                return &v.sizeCache
                        case 2:
                                return &v.unknownFields
                        default:
                                return nil
                        }
                }
                file_daemon_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
                        switch v := v.(*EmptyRequest); i {
                        case 0:
                                return &v.state
                        case 1:
                                return &v.sizeCache
                        case 2:
                                return &v.unknownFields
                        default:
                                return nil
                        }
                }
                file_daemon_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
                        switch v := v.(*QosFlow); i {
                        case 0:
                                return &v.state
                        case 1:
                                return &v.sizeCache
                        case 2:
                                return &v.unknownFields
                        default:
                                return nil
                        }
                }
                file_daemon_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
                        switch v := v.(*QosFlows); i {
                        case 0:
                                return &v.state
                        case 1:
                                return &v.sizeCache
                        case 2:
                                return &v.unknownFields
                        default:
                                return nil
                        }
                }
                file_daemon_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
                        switch v := v.(*PodInfo); i {
                        case 0:
                                return &v.state
                        case 1:
                                return &v.sizeCache
                        case 2:
                                return &v.unknownFields
                        default:
                                return nil
                        }
                }
                file_daemon_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
                        switch v := v.(*PodInfos); i {
                        case 0:
                                return &v.state
                        case 1:
                                return &v.sizeCache
                        case 2:
                                return &v.unknownFields
                        default:
                                return nil
                        }
                }
        }
        type x struct{}
        out := protoimpl.TypeBuilder{
                File: protoimpl.DescBuilder{
                        GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
                        RawDescriptor: file_daemon_rpc_proto_rawDesc,
                        NumEnums:      0,
                        NumMessages:   13,
                        NumExtensions: 0,
                        NumServices:   1,
                },
                GoTypes:           file_daemon_rpc_proto_goTypes,
                DependencyIndexes: file_daemon_rpc_proto_depIdxs,
                MessageInfos:      file_daemon_rpc_proto_msgTypes,
        }.Build()
        File_daemon_rpc_proto = out.File
        file_daemon_rpc_proto_rawDesc = nil
        file_daemon_rpc_proto_goTypes = nil
        file_daemon_rpc_proto_depIdxs = nil
}
