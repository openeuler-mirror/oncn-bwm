// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: daemon_rpc.proto

package daemon_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetQosRpc_SetQos_FullMethodName         = "/rpc.NetQosRpc/SetQos"
	NetQosRpc_UnSetQos_FullMethodName       = "/rpc.NetQosRpc/UnSetQos"
	NetQosRpc_SetFlow_FullMethodName        = "/rpc.NetQosRpc/SetFlow"
	NetQosRpc_UnSetFlow_FullMethodName      = "/rpc.NetQosRpc/UnSetFlow"
	NetQosRpc_ListQosFlow_FullMethodName    = "/rpc.NetQosRpc/ListQosFlow"
	NetQosRpc_ListQosPodInfo_FullMethodName = "/rpc.NetQosRpc/ListQosPodInfo"
)

// NetQosRpcClient is the client API for NetQosRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetQosRpcClient interface {
	SetQos(ctx context.Context, in *SetQosRequest, opts ...grpc.CallOption) (*SetQosReply, error)
	UnSetQos(ctx context.Context, in *UnSetQosRequest, opts ...grpc.CallOption) (*UnSetQosReply, error)
	SetFlow(ctx context.Context, in *QosFlow, opts ...grpc.CallOption) (*SetFlowReply, error)
	UnSetFlow(ctx context.Context, in *QosFlow, opts ...grpc.CallOption) (*UnSetFlowReply, error)
	ListQosFlow(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*QosFlows, error)
	ListQosPodInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*PodInfos, error)
}

type netQosRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewNetQosRpcClient(cc grpc.ClientConnInterface) NetQosRpcClient {
	return &netQosRpcClient{cc}
}

func (c *netQosRpcClient) SetQos(ctx context.Context, in *SetQosRequest, opts ...grpc.CallOption) (*SetQosReply, error) {
	out := new(SetQosReply)
	err := c.cc.Invoke(ctx, NetQosRpc_SetQos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netQosRpcClient) UnSetQos(ctx context.Context, in *UnSetQosRequest, opts ...grpc.CallOption) (*UnSetQosReply, error) {
	out := new(UnSetQosReply)
	err := c.cc.Invoke(ctx, NetQosRpc_UnSetQos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netQosRpcClient) SetFlow(ctx context.Context, in *QosFlow, opts ...grpc.CallOption) (*SetFlowReply, error) {
	out := new(SetFlowReply)
	err := c.cc.Invoke(ctx, NetQosRpc_SetFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netQosRpcClient) UnSetFlow(ctx context.Context, in *QosFlow, opts ...grpc.CallOption) (*UnSetFlowReply, error) {
	out := new(UnSetFlowReply)
	err := c.cc.Invoke(ctx, NetQosRpc_UnSetFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netQosRpcClient) ListQosFlow(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*QosFlows, error) {
	out := new(QosFlows)
	err := c.cc.Invoke(ctx, NetQosRpc_ListQosFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netQosRpcClient) ListQosPodInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*PodInfos, error) {
	out := new(PodInfos)
	err := c.cc.Invoke(ctx, NetQosRpc_ListQosPodInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetQosRpcServer is the server API for NetQosRpc service.
// All implementations must embed UnimplementedNetQosRpcServer
// for forward compatibility
type NetQosRpcServer interface {
	SetQos(context.Context, *SetQosRequest) (*SetQosReply, error)
	UnSetQos(context.Context, *UnSetQosRequest) (*UnSetQosReply, error)
	SetFlow(context.Context, *QosFlow) (*SetFlowReply, error)
	UnSetFlow(context.Context, *QosFlow) (*UnSetFlowReply, error)
	ListQosFlow(context.Context, *EmptyRequest) (*QosFlows, error)
	ListQosPodInfo(context.Context, *EmptyRequest) (*PodInfos, error)
	mustEmbedUnimplementedNetQosRpcServer()
}

// UnimplementedNetQosRpcServer must be embedded to have forward compatible implementations.
type UnimplementedNetQosRpcServer struct {
}

func (UnimplementedNetQosRpcServer) SetQos(context.Context, *SetQosRequest) (*SetQosReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetQos not implemented")
}
func (UnimplementedNetQosRpcServer) UnSetQos(context.Context, *UnSetQosRequest) (*UnSetQosReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSetQos not implemented")
}
func (UnimplementedNetQosRpcServer) SetFlow(context.Context, *QosFlow) (*SetFlowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFlow not implemented")
}
func (UnimplementedNetQosRpcServer) UnSetFlow(context.Context, *QosFlow) (*UnSetFlowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSetFlow not implemented")
}
func (UnimplementedNetQosRpcServer) ListQosFlow(context.Context, *EmptyRequest) (*QosFlows, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQosFlow not implemented")
}
func (UnimplementedNetQosRpcServer) ListQosPodInfo(context.Context, *EmptyRequest) (*PodInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQosPodInfo not implemented")
}
func (UnimplementedNetQosRpcServer) mustEmbedUnimplementedNetQosRpcServer() {}

// UnsafeNetQosRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetQosRpcServer will
// result in compilation errors.
type UnsafeNetQosRpcServer interface {
	mustEmbedUnimplementedNetQosRpcServer()
}

func RegisterNetQosRpcServer(s grpc.ServiceRegistrar, srv NetQosRpcServer) {
	s.RegisterService(&NetQosRpc_ServiceDesc, srv)
}

func _NetQosRpc_SetQos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetQosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetQosRpcServer).SetQos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetQosRpc_SetQos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetQosRpcServer).SetQos(ctx, req.(*SetQosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetQosRpc_UnSetQos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSetQosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetQosRpcServer).UnSetQos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetQosRpc_UnSetQos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetQosRpcServer).UnSetQos(ctx, req.(*UnSetQosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetQosRpc_SetFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QosFlow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetQosRpcServer).SetFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetQosRpc_SetFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetQosRpcServer).SetFlow(ctx, req.(*QosFlow))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetQosRpc_UnSetFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QosFlow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetQosRpcServer).UnSetFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetQosRpc_UnSetFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetQosRpcServer).UnSetFlow(ctx, req.(*QosFlow))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetQosRpc_ListQosFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetQosRpcServer).ListQosFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetQosRpc_ListQosFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetQosRpcServer).ListQosFlow(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetQosRpc_ListQosPodInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetQosRpcServer).ListQosPodInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetQosRpc_ListQosPodInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetQosRpcServer).ListQosPodInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetQosRpc_ServiceDesc is the grpc.ServiceDesc for NetQosRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetQosRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NetQosRpc",
	HandlerType: (*NetQosRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetQos",
			Handler:    _NetQosRpc_SetQos_Handler,
		},
		{
			MethodName: "UnSetQos",
			Handler:    _NetQosRpc_UnSetQos_Handler,
		},
		{
			MethodName: "SetFlow",
			Handler:    _NetQosRpc_SetFlow_Handler,
		},
		{
			MethodName: "UnSetFlow",
			Handler:    _NetQosRpc_UnSetFlow_Handler,
		},
		{
			MethodName: "ListQosFlow",
			Handler:    _NetQosRpc_ListQosFlow_Handler,
		},
		{
			MethodName: "ListQosPodInfo",
			Handler:    _NetQosRpc_ListQosPodInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daemon_rpc.proto",
}
